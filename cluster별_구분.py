# -*- coding: utf-8 -*-
"""cluster별 구분.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XNYiLKqmtuKW45KkB_jkhyV2d9Gc60JD
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
from yellowbrick.cluster import KElbowVisualizer
from sklearn.model_selection import train_test_split

base_src='./drive/MyDrive'
df=pd.read_excel(base_src+'/COVID-19-Constructed-Dataset.xlsx') #read csv file and store in df
print(df)

# Print dataset statistical data.
print("Statistical data: ")
print(df.describe())

# Print Columns names.
print("Columns names: ")
print(df.columns.values)

# Print Columns data types.
print("Columns data types: ")
print(df.dtypes)

#학생들의 성적을 코로나 전학기와 후학기로 나누고 학생 ID가 같으면 데이터를 합쳤습니다.
df["timeperiod"] = [1 if i >= 3 else 0 for i in df["timeperiod"]]
before_Covid_groupID = pd.DataFrame(columns=df.columns)
for i in range(1,1401):
  condition = (df.timeperiod == 0) & (df.studentID==i)
  k=df.loc[condition]
  #print(pd.Series(k.sum(axis=0)/3))
  before_Covid_groupID=before_Covid_groupID.append(pd.Series(k.sum(axis=0)/3),ignore_index=True)
print("before_Covid_groupID______________________________________")
print(before_Covid_groupID)

after_Covid_groupID = pd.DataFrame(columns=df.columns)
for i in range(1,1401):
  condition = (df.timeperiod == 1) & (df.studentID==i)
  k=df.loc[condition]
  #print(pd.Series(k.sum(axis=0)/3))
  after_Covid_groupID=after_Covid_groupID.append(pd.Series(k.sum(axis=0)/3),ignore_index=True)
print("after_Covid_groupID______________________________________")
print(after_Covid_groupID)

#평균과 합
before_Covid_groupID['total']=before_Covid_groupID['readingscore']+before_Covid_groupID['writingscore']+before_Covid_groupID['mathscore']+before_Covid_groupID['readingscoreSL']+before_Covid_groupID['writingscoreSL']+before_Covid_groupID['mathscoreSL']
#print(df['total'])
before_Covid_groupID['mean']=(before_Covid_groupID['total'])/6
print(before_Covid_groupID)

after_Covid_groupID['total']=after_Covid_groupID['readingscore']+after_Covid_groupID['writingscore']+after_Covid_groupID['mathscore']+after_Covid_groupID['readingscoreSL']+after_Covid_groupID['writingscoreSL']+after_Covid_groupID['mathscoreSL']
#print(df['total'])
after_Covid_groupID['mean']=(after_Covid_groupID['total'])/6
print(after_Covid_groupID)

before_Covid_groupID['after_total']=after_Covid_groupID['total']
print(before_Covid_groupID)

# 두 가지 feature를 대상
before_data = before_Covid_groupID[['mean', 'total']]
after_data = after_Covid_groupID[['mean', 'total']]

# 정규화 진행
scaler = MinMaxScaler()
before_data_scale = scaler.fit_transform(before_data)
after_data_scale = scaler.fit_transform(after_data)

#Elbow를 통한 최적의 k를 구함
model = KMeans()
#visualizer = KElbowVisualizer(model, k=(1,10))
#visualizer.fit(data_scale)

k = 3

# 그룹 수, random_state 설정
model = KMeans(n_clusters = k, random_state = 10)

# 정규화된 데이터에 학습
model.fit(before_data_scale)

# 클러스터링 결과 각 데이터가 몇 번째 그룹에 속하는지 저장
before_Covid_groupID['cluster'] = model.fit_predict(before_data_scale)
after_Covid_groupID['cluster'] = model.fit_predict(after_data_scale)
before_Covid_groupID['cluster1']=after_Covid_groupID['cluster']
cluster_0_df_y = before_Covid_groupID[before_Covid_groupID['cluster1'] == 0]
cluster_1_df_y = before_Covid_groupID[before_Covid_groupID['cluster1'] == 1]
cluster_2_df_y = before_Covid_groupID[before_Covid_groupID['cluster1'] == 2]

#Cluster별로 데이터를 분류
before_Covid_groupID_0 = pd.DataFrame(columns=df.columns)
before_Covid_groupID_1 = pd.DataFrame(columns=df.columns)
before_Covid_groupID_2 = pd.DataFrame(columns=df.columns)
#cluster별로 분류
for i in range(0,3):
  condition = (before_Covid_groupID.cluster == i)
  if i==0:
    before_Covid_groupID_0=before_Covid_groupID.loc[condition]
  if i==1:
    before_Covid_groupID_1=before_Covid_groupID.loc[condition]
  if i==2:
    before_Covid_groupID_2=before_Covid_groupID.loc[condition]

#데이터분류
data0 =before_Covid_groupID_0['mean'].to_numpy()
target0 = before_Covid_groupID_0['after_total'].to_numpy()
train_total_data0,test_total_data0,train_total_target0,test_total_target0=train_test_split(data0 , target0 , test_size=0.2 , random_state=10)
train_total_data0 = train_total_data0.reshape(-1,1)
test_total_data0 = test_total_data0.reshape(-1,1)

#데이터1 분류
data1 =before_Covid_groupID_1['mean'].to_numpy()
target1 = before_Covid_groupID_1['after_total'].to_numpy()
train_total_data1,test_total_data1,train_total_target1,test_total_target1=train_test_split(data1 , target1 , test_size=0.2)
train_total_data1 = train_total_data1.reshape(-1,1)
test_total_data1 = test_total_data1.reshape(-1,1)

#데이터2 분류
data2 =before_Covid_groupID_2['mean'].to_numpy()
target2 = before_Covid_groupID_2['after_total'].to_numpy()
train_total_data2,test_total_data2,train_total_target2,test_total_target2=train_test_split(data2 , target2 , test_size=0.2)
train_total_data2 = train_total_data2.reshape(-1,1)
test_total_data2 = test_total_data2.reshape(-1,1)

#train_total_data0 선형회귀 모델
lf = LinearRegression()
lf.fit(train_total_data0,train_total_target0)
print(lf.score(train_total_data0 , train_total_target0))
print(lf.score(test_total_data0 , test_total_target0))

#train_total_data1 선형회귀 모델
lf1 = LinearRegression()
lf1.fit(train_total_data1,train_total_target1)
print(lf1.score(train_total_data1 , train_total_target1))
print(lf1.score(test_total_data1 , test_total_target1))

#train_total_data2 선형회귀 모델
lf2 = LinearRegression()
lf2.fit(train_total_data2,train_total_target2)
print(lf2.score(train_total_data2 , train_total_target2))
print(lf2.score(test_total_data2 , test_total_target2))

#산점도 출력
plt.scatter(test_total_data0 , test_total_target0)
plt.scatter(test_total_data0,lf.predict(test_total_data0))
plt.plot( [30,90], [30*lf.coef_ +lf.intercept_ ,90*lf.coef_ + lf.intercept_])
plt.scatter(61.518926 , 372.113553 ,marker="^",color="black")
plt.show()

#before_Covid_groupID cluster별 산점도출력
plt.scatter(before_Covid_groupID_0['mean'], before_Covid_groupID_0['after_total'],c="red", label = 'cluster ' + str(0))
plt.scatter(before_Covid_groupID_1['mean'], before_Covid_groupID_1['after_total'],c="green", label = 'cluster ' + str(1))
plt.scatter(before_Covid_groupID_2['mean'], before_Covid_groupID_2['after_total'],c="blue", label = 'cluster ' + str(2))

#cluster0,1,2 선형회귀 그리기 
plt.plot( [50,100], [50*lf.coef_ +lf.intercept_ ,100*lf.coef_ + lf.intercept_])
plt.plot( [50,100], [50*lf1.coef_ +lf1.intercept_ ,100*lf1.coef_ + lf1.intercept_])
plt.plot( [50,100], [50*lf2.coef_ +lf2.intercept_ ,100*lf2.coef_ + lf2.intercept_])

plt.legend()
plt.title('K = %d results'%k , size = 15)
plt.xlabel('Mean', size = 12)
plt.ylabel('Total', size = 12)
plt.show()

#before_Covid_groupID 산점도출력
plt.scatter(cluster_0_df_y['mean'], cluster_0_df_y['after_total'], c="red",label = 'cluster ' + str(0)) #cluster_id 값 0인 산점도 빨간색
plt.scatter(cluster_1_df_y['mean'], cluster_1_df_y['after_total'], c="green",label = 'cluster ' + str(1)) #cluster_id 값 1인 산점도 녹색
plt.scatter(cluster_2_df_y['mean'], cluster_2_df_y['after_total'], c="blue",label = 'cluster ' + str(2)) #cluster_id 값 2인 산점도 파란색


#cluster0,1,2 선형회귀 그리기 
plt.plot( [50,100], [50*lf.coef_ +lf.intercept_ ,100*lf.coef_ + lf.intercept_])
plt.plot( [50,100], [50*lf1.coef_ +lf1.intercept_ ,100*lf1.coef_ + lf1.intercept_])
plt.plot( [50,100], [50*lf2.coef_ +lf2.intercept_ ,100*lf2.coef_ + lf2.intercept_])
plt.xlabel('Mean', size = 12)
plt.ylabel('Total', size = 12)
plt.show()