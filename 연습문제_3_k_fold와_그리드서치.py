# -*- coding: utf-8 -*-
"""연습문제_3_K_Fold와_그리드서치.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-S9_RTRvWmAO77I3T6AZtOOvbMyyUYk-
"""

#Step 1.분석할 데이터가 저장된 파일을 불러와서 변수에 할당합니다.
from google.colab import files
myfile = files.upload()
import io
import pandas as pd
#pd.read_csv로 csv파일 불러오기
src_data = pd.read_csv(io.BytesIO(myfile['와인.csv']),
                       encoding='cp949')
src_data

#Step 2.주어진 데이터를 훈련용 데이터와 검증용 데이터로 나눕니다
import numpy as np
data = np.array( src_data[ ['알콜도수','당도','산도_ph']] )
target = np.array( src_data['종류'])
print(data)
print(target)

from sklearn.model_selection import train_test_split
훈련용_data , 테스트용_data , 훈련용_target , 테스트용_target = train_test_split(
    data , target , test_size=0.2 , random_state=10)

# 교차검증 없이 모델 검증합니다.
from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier(random_state=10)
dt.fit(훈련용_data , 훈련용_target)
print(dt.score(훈련용_data , 훈련용_target))
print(dt.score(테스트용_data , 테스트용_target))

#Step 3.5-Fold 교차 검증 수행
from sklearn.model_selection import cross_validate , cross_val_score
from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier(random_state=10)
scores_1 = cross_validate(dt , 훈련용_data , 훈련용_target,cv=5)
scores_2 = cross_val_score(dt, 훈련용_data , 훈련용_target,cv=5)
print('cross_validate 결과:', np.mean(scores_1['test_score']))
print('cross_val_score 결과:', np.mean(scores_2) )

#그리드서치를 사용하여 하이퍼 파라미터 튜닝하기 
from sklearn.model_selection import GridSearchCV
parm = {'max_depth': range(1,10,1) ,
        'min_impurity_decrease': np.arange(0.0001,0.001 , 0.0001),
        'min_samples_split' : range(2,100,10) }
gs = GridSearchCV(DecisionTreeClassifier(random_state=50) , parm , n_jobs=-1)
gs.fit(훈련용_data , 훈련용_target)
print(gs.best_params_)

print(gs.best_params_)
dt = gs.best_estimator_
print(dt.score(훈련용_data , 훈련용_target))

#랜덤 서치로 범위 설정하기
from scipy.stats import uniform , randint
parm = {'min_impurity_decrease' : uniform(0.0001,0.001) ,
        'max_depth' : randint(2,20) ,
        'min_samples_split' : randint(2,30) ,
        'min_samples_leaf' : randint(2,20) }

from sklearn.model_selection import RandomizedSearchCV
gs = RandomizedSearchCV(DecisionTreeClassifier(random_state=50) , parm , n_iter=20 , n_jobs=-1 )
gs.fit(훈련용_data , 훈련용_target)
print(gs.best_params_)
dt2 = gs.best_estimator_
print(dt2.score(훈련용_data , 훈련용_target))

